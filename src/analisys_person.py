# -*- coding: utf-8 -*-

'''
    performs data analysis for the Person model
'''

import os, sys, csv, datetime, time, sort_collection as sort
from models.Person import Person
from typing import List, Dict


def analyze(directory_path: str) -> bool:
    '''
        parses data from directory files passed as argument. When done, it creates a folder
        named / analyze, where it contains all the files generated by the analysis.
        returns true if the algorithm can do the correct analysis. Otherwise returns false.
    '''
    sort.ALGORITHMS_SORTING_CHOICES
    filenames: List[str] = __get_all_filenames_from_directory(directory_path)

    for filename in filenames:
        pass

    return True

def __get_all_filenames_from_directory(path: str):
    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]

def readCSV(input_filename: str) -> List[Person]:
    '''
        Read the content inside the filename passed as argument and transform 
        to the Person objects.
    '''

    try:
        lstPerson: List[Person] = []
        with open("_INPUT_FILES_PATH" + input_filename, 'r') as csvfile:
            dataCSV = csv.reader(csvfile, delimiter=',')

            # Ignora a primeira linha do arquivo, pois Ã© o header
            next(dataCSV)

            # Percorre pelas linhas instanciando o objeto da classe Person armazenando dentro da lista
            for dataRow in dataCSV: 
                lstPerson.append(Person(
                    dataRow[2], # id
                    dataRow[0], # email
                    dataRow[1], # gender
                    datetime.datetime.strptime(dataRow[3], "%Y-%m-%d"), # birthdate
                    int(dataRow[4]), # height
                    int(dataRow[5]), # weight
                ))
    except FileNotFoundError as err:
        print(err)
        sys.exit(1)
    except IOError as err:
        print(err)
        sys.exit(1)
    except Exception as err:
        print(err)
        sys.exit(1)
    else:
        return lstPerson


##################################### UNIT LIB TEST #####################################
def execute_test():
    pass

if __name__ == '__main__':
    pass